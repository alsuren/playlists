#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2012 David Laban <alsuren@gmail.com>
# Based on daap-resolver
# Created by Christophe "Tito" De Wolf <tito@webtito.be> twitter.com/tito1337
# Licensed under GPLv3 (http://www.gnu.org/licenses/gpl)
######################################################################


import jolify
from jolify import get_structured_listing, get_name_artist_map, transpose

import os
import sys
from struct import unpack, pack
import json

import logging

logger = logging.getLogger('jazz-on-line-resolver')
handler = logging.FileHandler('.jol-resolver.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)


	
def print_json(o):
    s = json.dumps(o)
    if not LINE_BASED_PROCESSING:
	sys.stdout.write(pack('!L', len(s)))
        sys.stdout.write(s)
    else:
        sys.stdout.write(s + '\n')
    sys.stdout.flush()


def return_exact_results(request, results, callback):
    formatted_results = []
    for song in results:
    	result = {
		"artist": song["artist"],
		"track": song["name"],
		"score": 1,
		"url": song["link"],
		"mimetime": "audio/mpeg",
		"source": "jazz-on-line.com",
	    }
	if 1800 < song.get("year", 0) < 2100:
		result["year"] = song["year"]
        formatted_results.append(result)
    response = {'qid': request['qid'],
            'results': structured_results,
            '_msgtype': 'results'
	}
    callback(response)

def search_for_track(request, callback):
    song_name = normalize_name_tag(request['track'])
    songs_by_artist = songs_by_name_artist[song_name]
    for artist in parse_artist_tag(request["title"]):
        if artist in songs_by_artist:
            songs = songs_by_artist[artist]
            exact_results = []
            for song in songs:
                exact_results.append(song)

    if exact_results:
    	return_exact_results(request, exact_results, callback)
    else:
        logger.debug("%s produced no results", request)
	

if __name__ == "__main__":
	logger.info("Started")
	if "--line-based" in sys.argv:
		sys.argv.remove("--line-based")
		LINE_BASED_PROCESSING = True
                logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
	else:
		LINE_BASED_PROCESSING = False

	structured_listing = get_structured_listing("listing.txt")
	songs_by_artist_name = get_name_artist_map(structured_listing)
	songs_by_name_artist = transpose(songs_by_artist_name)

	if os.path.exists("local_files_map.json"):
	    local_files_map = json.load(open("local_files_map.json"))
	else:
	    local_files_map = make_local_files_map("C:/users/alsuren/music")
	    json.dump(local_files_map, open("local_files_map.json", "w"), indent=1)

	settings = {"_msgtype": "settings", "name": "jazz-on-line resolver",
		"targettime": 100, # ms
		"weight": 80
		}
	print_json(settings)
	logger.info("Advertised settings.")

	while True:
		if LINE_BASED_PROCESSING:
			msg = sys.stdin.readline()
			request = json.loads(msg)
		else:
			big_endian_length = sys.stdin.read()
			length = unpack("!L", big_endian_length)
			if not length or not 4096 > length > 0:
				break
			msg = sys.stdin.read(length)
			request = json.loads(msg)
		
		if request['_msgtype'] == 'rq': # Search
			if 'fulltext' in request:
				logger.debug("not handling searches for now")
			else:
				logger.debug("searching for for %s", request)

